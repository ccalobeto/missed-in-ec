completedIds = {
  let result = []
  data.forEach(row => {
    const item = getCountyId(features, [row.longitude, row.latitude])
    result.push({
      index: row.index,
      longitude: row.longitude,
      latitude: row.latitude,
      province: row.province,
      parishId: item,
      cantonId: item ? item.substring(0, 4) : NaN,
      provinceId: item ? item.substring(0, 2) : NaN
    })
  })
  return result
}

mergedData = {
  const narrowData = data.map(d => ({
    index: d.index,
    province: d.province,
    state: d.state,
    ageGroup: d.age_group,
  }))
  return join(narrowData, completedIds, "index", "index")
}

// Let's make a map!
function map(states, projection) {
  // create path
  const path = d3.geoPath().projection(projection)
  // Create the svg
  const svg = d3.create("svg")
    .attr("width", width)
    .attr("height", 600)
    .style("text-anchor", "middle")
    .style('font-family', 'sans-serif')
    .style("font-size", "12px")
  
  // Add paths for each state
  const paths = svg.selectAll("path")
    .data(states.features)
    .join("path")
    .attr("d", path)
    .attr("fill", "#ddd")
    //.attr("fill", d => {
    //  return color(most_recent_obj.get(d.properties.name))
    //})
  
  // Return svg
  return svg.node()
}